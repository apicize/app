name: 'publish'

on:
  push:
    tags:
      - '*'

jobs:
  lint:
    name: Lint (Clippy)
    runs-on: ubuntu-22.04
    steps:
      - name: checkout project
        uses: actions/checkout@v4
      - name: install rust and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: check cli
        working-directory: ./@apicize/cli
        run: cargo clippy
      - name: check app
        working-directory: ./@apicize/src-tauri
        run: cargo clippy
  
  publish-tauri:
    name: Release Tauri app
    permissions:
      contents: write
    needs: 'lint'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
  
    runs-on: ${{ matrix.platform }}
    outputs:
      appVersion: ${{ steps.deploy-tauri.outputs.appVersion }}
      releaseUploadUrl: ${{ steps.deploy-tauri.outputs.releaseUploadUrl }}
    
    steps:
      - name: checkout project
        uses: actions/checkout@v4
      - name: enable Corepack
        run: corepack enable      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: install rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: install rust and dependencies
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - name: build dependencies
        run: yarn build-deps
        working-directory: ./

      - id: deploy-tauri
        name: deploy tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: apicize-app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Apicize App __VERSION__'
          releaseBody: 'See the assets to download this version and install.  Unfortunately, Windows and MacOS distributions are not signed at this time.'
          # releaseDraft: true
          prerelease: false
          args: --verbose
          projectPath: ./app

