name: 'publish'

on:
  push:
    tags:
      - '*'

jobs:
  publish-tauri:
    name: Release Tauri app
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      appVersion: ${{ steps.deploy-tauri.outputs.appVersion }}
      releaseUploadUrl: ${{ steps.deploy-tauri.outputs.releaseUploadUrl }}
    
    steps:
      - uses: actions/checkout@v4

      - name: enable Corepack
        run: corepack enable      

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: install rust and dependencies
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - name: build dependencies
        run: yarn build-deps
        working-directory: ./

      - id: deploy-tauri
        name: deploy tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: apicize-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'apicize __VERSION__'
          releaseBody: 'See the assets to download this version and install.  Assets beginning with "apicize_" are the GUI app, assets beginning wtih "apicize-run_" are the CLI runner'
          # releaseDraft: true
          prerelease: false
          args: --verbose
          projectPath: ./app

  publish-cli-deb:
    name: Release apicize-run as .deb
    runs-on: Ubuntu-22.04
    needs: 'publish-tauri'
    steps:
      - name: install cargo-deb
        run: cargo install cargo-deb
        working-directory: ./@apicize/cli
      - name: build .deb package
        run: cargo deb
        working-directory: ./@apicize/cli
      - name: add .deb package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{needs.publish-tauri.outputs.releaseUploadUrl}}
            asset_path: ./@apicize/cli/target/debian/apicize-run_${{needs.publish-tauri.outputs.appVersion}}_amd64.deb
            asset_name: apicize-run_${{needs.publish-tauri.outputs.appVersion}}_amd64.deb
            asset_content_type: application/gzip

  publish-cli-rpm:
    name: Release apicize-run as .rpm
    runs-on: Ubuntu-22.04
    needs: 'publish-tauri'
    steps:
      - name: cargo-generate-rpm
        run: cargo install cargo-generate-rpm
        working-directory: ./@apicize/cli
      - name: build application
        run: cargo build && strip -s ./target/release/apicize-run
        working-directory: ./@apicize/cli
      - name: build .rpm package
        run: cargo generate-rpm
      - name: remove release from .rpm file name
        run: run mv ./target/generate-rpm/apicize-run-${{needs.publish-tauri.outputs.appVersion}}-999.x86_64.rpm ./target/generate-rpm/apicize-run-${{needs.publish-tauri.outputs.appVersion}}.x86_64.rpm
        working-directory: ./@apicize/cli
      - name: add .rpm package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{needs.publish-tauri.outputs.releaseUploadUrl}}
            asset_path: ./@apicize/cli/./target/generate-rpm/apicize-run-${{needs.publish-tauri.outputs.appVersion}}.x86_64.rpm
            asset_name: apicize-run_${{needs.publish-tauri.outputs.appVersion}}.x86_64.rpm
            asset_content_type: application/octet-stream
