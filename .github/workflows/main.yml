name: 'publish'

on:
  push:
    tags:
      - '*'

jobs:
  lint:
    name: Lint (Clippy)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Install rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Lint app
        working-directory: ./app/src-tauri
        run: cargo clippy
  
  publish-tauri:
    name: Release Tauri app
    permissions:
      contents: write
    needs: 'lint'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: '--verbose'
  
    runs-on: ${{ matrix.platform }}
    outputs:
      appVersion: ${{ steps.deploy-tauri.outputs.appVersion }}
      releaseUploadUrl: ${{ steps.deploy-tauri.outputs.releaseUploadUrl }}
    
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable      
      - name: Install Rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Install Dependencies
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: Install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.
      - name: Install Windows Trusted Signing
        if: matrix.platform == 'windows-latest'
        shell: bash
        env:
          # replace Azure credentials before running
          # WINDOWS_SIGN_COMMAND: "trusted-signing-cli -a ${{ vars.AZURE_CODE_SIGNING_NAME }} -c ${{ vars.AZURE_CERT_PROFILE_NAME }} -e ${{ vars.AZURE_ENDPOINT }} %1"
          WINDOWS_SIGN_COMMAND: "signtool sign /v /fd SHA256 /tr http://timestamp.acs.microsoft.com /td SHA256 /dlib /tmp/mtsc/bin/x64/Azure.CodeSigning.Dlib.dll /dmdf /tmp/mtsc/metadata.json %1"
        run: |
          sudo apt-get install -y wget jq 

          TMP=/tmp/mtsc
          METADATA="$TMP/metadata.json"
          
          if [ -f $TMP/bin/x64/Azure.CodeSigning.Dlib.dll ]; then
            echo "Microsoft.Trusted.Signing.Client already exists in $TMP, skipping download"
          else
            mkdir -p "$TMP"
            MTSC=$TMP/mtsc.nuget
            echo "Download Microsoft.Trusted.Signing.Client to $MTSC"
            wget -q -O $MTSC https://www.nuget.org/api/v2/package/Microsoft.Trusted.Signing.Client/
            echo "Extract Microsoft.Trusted.Signing.Client to $TMP"
            unzip -q -d $TMP $MTSC
          fi

          echo "Creating signing metadata at $METADATA"
          echo '{"Endpoint":"https://wcus.codesigning.azure.net/","CodeSigningAccountName":"Apicize","CertificateProfileName":"Apicize"}' > $METADATA

          echo "Login to Azure"
          az login --service-principal -t ${{ secrets.AZURE_TENANT_ID }} -u ${{ vars.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }}

          echo "Updating tauri.conf.json, set Windows bundle to ${WINDOWS_SIGN_COMMAND}"
          cd "$GITHUB_WORKSPACE"
          cat './app/src-tauri/tauri.conf.json' | jq '.bundle .windows += {"signCommand": env.WINDOWS_SIGN_COMMAND}' > './app/src-tauri/temp.json' && mv './app/src-tauri/temp.json' './app/src-tauri/tauri.conf.json'
        # env:
        #   WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        # run: |
        #   New-Item -ItemType directory -Path certificate
        #   Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
        #   certutil -decode certificate/tempCert.txt certificate/certificate.pfx
        #   Remove-Item -path certificate -include tempCert.txt
        #   Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My
      - name: Perform a build
        run: yarn build:release
        working-directory: ./
      - id: deploy-tauri
        name: Deploy Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZURE_TENANT_ID: ${{ matrix.platform == 'windows-latest' && secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ matrix.platform == 'windows-latest' && vars.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ matrix.platform == 'windows-latest' && secrets.AZURE_CLIENT_SECRET }}
        with:
          updaterJsonPreferNsis: true
          tagName: apicize-app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Apicize App __VERSION__'
          releaseBody: 'See the assets to download this version and install.  Unfortunately, Windows and MacOS distributions are not signed at this time.'
          # releaseDraft: true
          prerelease: false
          args: --verbose
          projectPath: ./app
