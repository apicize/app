name: 'publish'

on:
  push:
    tags:
      - '*'

jobs:
  lint:
    name: Lint (Clippy)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Install rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Lint app
        working-directory: ./app/src-tauri
        run: cargo clippy
      - name: DISPLAY SECRET X
        run: echo ${{secrets.AZURE_TENANT_ID}} | sed 's/./& /
      - name: DISPLAY SECRET Y
        run: echo ${{secrets.AZURE_CLIENT_SECRET}} | sed 's/./& /
        
  publish-tauri:
    name: Release Tauri app
    permissions:
      contents: write
    needs: 'lint'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            rust_target: aarch64-apple-darwin            
          - platform: 'macos-13' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            rust_target: x86_64-apple-darwin            
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            rust_target: x86_64-unknown-linux-gnu            
          - platform: 'windows-latest'
            args: ''
            rust_target: x86_64-pc-windows-msvc
  
    runs-on: ${{ matrix.platform }}
    outputs:
      appVersion: ${{ steps.deploy-tauri.outputs.appVersion }}
      releaseUploadUrl: ${{ steps.deploy-tauri.outputs.releaseUploadUrl }}
    
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable      
      - name: Install Rust and add target
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          rustup target add ${{ matrix.rust_target }}
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: Add Windows Trusted Signing
        shell: pwsh
        if: matrix.platform == 'windows-latest'
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_ENDPOINT: ${{ vars.AZURE_ENDPOINT }}
          AZURE_CERT_PROFILE_NAME: ${{ vars.AZURE_CERT_PROFILE_NAME }}
          AZURE_CODE_SIGNING_NAME: ${{ vars.AZURE_CODE_SIGNING_NAME }}
          TAURI_CONF_JSON: "./app/src-tauri/tauri.conf.json"
        run: |
          $tempFolderPath = Join-Path $env:Temp "mtsc"
          $mtscName = Join-Path $tempFolderPath "mtsc.nuget.zip"
          $dlibName = Join-Path $tempFolderPath "bin" | Join-Path -ChildPath "x64" | Join-Path -ChildPath "Azure.CodeSigning.Dlib.dll" 
          $dmdName = Join-Path $tempFolderPath "metadata.json"
          $tauriConfJson = $env:TAURI_CONF_JSON ?? "./src-tauri/tauri.conf.json"

          if (-not(Test-Path -path $tauriConfJson)) {
            Throw "Unable to locate Tauri configuration at $taurConfJson"
          }

          $signTool = Get-Command "signtool.exe" -ErrorAction SilentlyContinue
          if ($signTool) {
            $signToolPath = Split-Path $signTool
          } else {
            if (Test-Path -path "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe") {
              $signToolpath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64"
            } else {
              Write-Host "Searching for signtool.exe in C:\Program Files (x86)"
              $signtoolMatches = Get-Childitem –Path "C:\Program Files (x86)" -Include signtool.exe -File -Recurse -ErrorAction SilentlyContinue
              if ($signtoolMatches.Length -gt 0) {
                $signToolPath = Split-path $signtoolMatches[0].FullName
              } else {
                Write-Host "Searching for signtool.exe in C:\Program Files"
                $signtoolMatches = Get-Childitem –Path "C:\Program Files" -Include signtool.exe -File -Recurse -ErrorAction SilentlyContinue
                if ($signtoolMatches.Length -gt 0) {
                  $signToolPath = Split-path $signtoolMatches[0].FullName
                }
              }
            }
          }

          if ($signToolPath) {
            Write-Host "Appending location of signtool.exe to PATH: $signToolPath"
            Add-Content $env:GITHUB_PATH $signToolPath
          } else {
            Throw "Unable to locate signtool.exe"
          }

          if (-not(Test-Path -path $tempFolderPath)) {
              New-Item -Type Directory -Path $tempFolderPath | Out-Null
              Write-Host "Download Microsoft.Trusted.Signing.Client to $mtscName"
              $global:ProgressPreference = "SilentlyContinue"
              Invoke-WebRequest "https://www.nuget.org/api/v2/package/Microsoft.Trusted.Signing.Client/" -OutFile $mtscName
              Write-Host "Extracting $mtscName"
              Expand-Archive $mtscName -Force -DestinationPath $tempFolderPath
              $global:ProgressPreference = 'Continue'
          }

          Write-Host "Saving Autheticode digest to $dmdName"
          $metadata = [PSCustomObject]@{
              Endpoint               = $env:AZURE_ENDPOINT
              CodeSigningAccountName = $env:AZURE_CODE_SIGNING_NAME
              CertificateProfileName = $env:AZURE_CERT_PROFILE_NAME
          }
          $metadataAsJson = ConvertTo-Json -Depth 100 $metadata
          Set-Content -Path $dmdName -Value $metadataAsJson

          $batchName = Join-Path $tempFolderPath "signtool.bat"
          Set-Content -Path $batchName -Value """$signToolPath"" sign /v /fd SHA256 /tr http://timestamp.acs.microsoft.com /td SHA256 /dlib $dlibName /dmdf $dmdName %1"

          $signCommand = "signtool sign /v /fd SHA256 /tr http://timestamp.acs.microsoft.com /td SHA256 /dlib $dlibName /dmdf $dmdName %1"
          Write-Host "Updating Windows signCommand in $tauriConfJson to $signCommand"
          $tauriConfigData = ConvertFrom-Json(Get-Content $tauriConfJson -Raw)
          $tauriConfigData.bundle.windows | Add-Member -Force -MemberType NoteProperty -Name signCommand -Value $signCommand
          $tauriConfigDataAsJson = ConvertTo-Json -Depth 100 $tauriConfigData
          Set-Content -Path $tauriConfJson -Value $tauriConfigDataAsJson

          Write-Host "Login to Azure"
          az login --service-principal --output none -t $env:AZURE_TENANT_ID -u $env:AZURE_CLIENT_ID -p $env:AZURE_CLIENT_SECRET
        # env:
        #   WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        # run: |
        #   New-Item -ItemType directory -Path certificate
        #   Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
        #   certutil -decode certificate/tempCert.txt certificate/certificate.pfx
        #   Remove-Item -path certificate -include tempCert.txt
        #   Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My  
      - name: Install and Build Front-End Dependencies
        run: |
          yarn install # change this to npm, pnpm or bun depending on which one you use.
          yarn run build-deps        
      - name: Store Apple Certificate
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-13'
        env:
          APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
        run: |
          echo "Copying Apple private key to /tmp/.private-key"
          printenv APPLE_API_PRIVATE_KEY > /tmp/.private-key
          cat /tmp/.private-key
      # - name: Install Tauri CLI
      #   run: cargo install tauri-cli --git https://github.com/tauri-apps/tauri
      - id: deploy-tauri
        name: Build and Deploy Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ vars.APPLE_SIGNING_IDENTITY }}
          APPLE_API_ISSUER: ${{ vars.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ vars.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: /tmp/.private-key
        with:
          updaterJsonPreferNsis: true
          tagName: apicize-app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Apicize App __VERSION__'
          releaseBody: 'See the assets to download this version and install (*.msi = Windows, *.deb = Debian/Ubuntu, *.rpm = RedHat/Fedora, *.dmg/*.tar.gz = MacOS).'
          # releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          projectPath: ./app
          # tauriScript: cargo tauri
