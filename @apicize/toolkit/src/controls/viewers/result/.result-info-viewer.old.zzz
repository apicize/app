import { Box, Stack, SxProps } from "@mui/material"
import { IconButton, Typography } from "@mui/material"
import CheckIcon from '@mui/icons-material/Check';
import BlockIcon from '@mui/icons-material/Block';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import beautify from "js-beautify";
import { observer } from "mobx-react-lite";
import { useClipboard } from "../../../contexts/clipboard.context";
import { useWorkspace } from "../../../contexts/workspace.context";
import { ApicizeError } from "@apicize/lib-typescript";
import { ExecutionResult } from "../../../models/workspace/execution";

const ApicizeErrorToString = (error?: ApicizeError): string => {
    const sub = (err?: ApicizeError) => err ? `, ${err.description}${ApicizeErrorToString(err.source)}` : '';
    return error ? `[${error.type}] ${error.description}${sub(error.source)}` : ''
}

export const ResultInfoViewer = observer((props: { requestOrGroupId: string, index: number }) => {

    const workspace = useWorkspace()
    const clipboardCtx = useClipboard()
    const requestOrGroupId = props.requestOrGroupId

    let idx = 0


    const fmtMinSec = (value: number, subZero: string | null = null) => {
        if (value === 0 && subZero) {
            return subZero
        }
        const m = Math.floor(value / 60000)
        value -= m * 60000
        const s = Math.floor(value / 1000)
        value -= s * 1000
        return `${m.toLocaleString().padStart(2, '0')}:${s.toString().padStart(2, '0')}${(0.1).toLocaleString()[1]}${value.toString().padEnd(3, '0')}`
    }

    const RenderResult = (props: { result: ExecutionResult, level: number, sx?: SxProps }) => {

        if (result?.execution) {
            return <RenderExecution key={`result-${idx++}`} result={props.result} level={props.level} sx={props.sx} />
        } else {
            return <RenderSummary key={`result-${idx++}`} result={props.result} level={props.level} sx={props.sx} />
        }
    }

    const RenderExecution = (props: { result: ExecutionResult, level: number, sx?: SxProps }) => {
        let showName
        let level
        if (props.level === -1) {
            showName = false
            level = 0
        } else {
            showName = true
            level = props.level
        }
        const childIndexes = props.result.info?.childIndexes ?? []
        const indent = `${level * 1}em`
        const rowSuffix = props.result.info.rowNumber && props.result.info.rowCount ? ` Row ${props.result.info.rowNumber} of ${props.result.info.rowCount}` : ''
        const subtitle = `${(props.result.info.runCount ?? 1) > 1 ? `Run ${props.result.info.runNumber} of ${props.result.info.runCount}` : ''}${props.result.success ? "Completed" : "Failed"}`
        const color = props.result.success ? 'success' : ((props.result.requestErrorCount ?? 0) > 0 || props.result?.execution?.error) ? 'error' : 'warning'

        return <Box key={`result-${idx++}`} paddingLeft={indent} sx={props.sx}>
            {showName
                ? <Typography variant="h3" sx={{ marginTop: '1em' }} component='div'>{props.result.info.title}{rowSuffix}
                    <Typography fontSize='1em' display='inline' marginLeft='0.8em' color={color}>({subtitle})</Typography>
                    <Box marginLeft='0.8em' display='inline'>
                        {props.result.executedAt > 0 ? `@${fmtMinSec(props.result.executedAt)}` : '@Start'}{props.result.duration > 0 ? ` for ${props.result.duration.toLocaleString()} ms` : ''}
                    </Box>
                </Typography>
                : null}
            <Box key={`result-${idx++}`} paddingLeft={indent}>
                {(props.result.execution?.error)
                    ? (<TestInfo isError={true} text={`${ApicizeErrorToString(props.result.execution.error)}`} />)
                    : (<></>)}
                {props.result.execution?.response
                    ? (<TestInfo text={`Status: ${props.result.execution.response.status} ${props.result.execution.response.statusText}`} />)
                    : (<></>)}
                {
                    (props.result.execution?.tests && props.result.execution.tests.length > 0)
                        ? <Box className='test-details'>
                            {
                                props.result.execution.tests.map(test => (<TestResult
                                    key={`test-${idx++}`}
                                    name={test.testName}
                                    success={test.success}
                                    error={test.error}
                                    logs={test.logs} />))
                            }
                        </Box>
                        : (<></>)
                }
                {
                    childIndexes.map(childIndex => {
                        const child = workspace.getExecutionResult(requestOrGroupId, childIndex)
                        if (child) {
                            if (child.execution) {
                                return <RenderExecution key={`result-${idx++}`} result={child} level={props.level + 1} sx={props.sx} />
                            } else {
                                return <RenderSummary key={`result-${idx++}`} result={child} level={props.level + 1} sx={props.sx} />
                            }
                        } else {
                            return <></>
                        }
                    })
                }
            </Box>
        </Box>


        {/* //     
        //     {/* {props.tokenCached
        //             ? (<TestInfo text='OAuth bearer token retrieved from cache' />)
        //             : (<></>)} */}


    }


    const RenderSummary = (props: { result: ExecutionResult, level: number, sx?: SxProps }) => {
        let showName
        let level
        if (props.level === -1) {
            showName = false
            level = 0
        } else {
            showName = true
            level = props.level
        }

        const childIndexes = props.result.info?.childIndexes ?? []
        const indent = `${level * 1}em`
        const subtitle = `${(props.result.info?.runCount ?? 0) > 1 ? `Run ${props.result.info.runNumber} of ${props.result.info.runCount}, ` : ''}${props.result.success ? "Completed" : "Failed"}`
        let color = props.result.success ? 'success' : ((props.result.requestErrorCount ?? 0) > 0 || props.result?.execution?.error) ? 'error' : 'warning'
        console.log(`Summary color for ${props.result.info.title} is ${color}`)
        return <Box key={`result-${idx++}`} paddingLeft={indent} sx={props.sx}>
            {showName
                ? <Typography variant="h3" sx={{ marginTop: '1em' }} component='div'>{props.result.info.title}
                    <Typography fontSize='1em' display='inline' marginLeft='0.8em' color={color}>({subtitle})</Typography>
                    <Box marginLeft='0.8em' display='inline'>
                        {props.result.executedAt > 0 ? `@${fmtMinSec(props.result.executedAt)}` : '@Start'}{props.result.duration > 0 ? ` for ${props.result.duration.toLocaleString()} ms` : ''}
                    </Box>
                </Typography>
                : null}

            {
                childIndexes.map(childIndex => {
                    const child = workspace.getExecutionResult(requestOrGroupId, childIndex)
                    if (child) {
                        if (child.execution) {
                            return <RenderExecution key={`result-${idx++}`} result={child} level={props.level + 1} sx={props.sx} />
                        } else {
                            return <RenderSummary key={`result-${idx++}`} result={child} level={props.level + 1} sx={props.sx} />
                        }
                    } else {
                        return <></>
                    }
                })
            }
        </Box>
    }

    const TestInfo = (props: { isError?: boolean, text: string }) =>
    (
        <Stack direction='row' key={`result-${idx++}`}>
            <Stack direction='column' sx={{ marginLeft: '0rem' }}>
                <Box sx={{ marginTop: 0, marginBottom: 0, paddingTop: 0, color: '#80000' }}>
                    {
                        props.isError === true
                            ? (<Box color='#f44336' sx={{ ":first-letter": { textTransform: 'capitalize' }, whiteSpace: 'pre-wrap' }}>{props.text}</Box>)
                            : (<>{props.text}</>)
                    }
                </Box>
            </Stack>
        </Stack>
    )

    const TestResult = (props: { name: string[], success: boolean, logs?: string[], error?: string }) =>
    (
        <Stack direction='row' className='test-result'>
            <Box sx={{ width: '1.5rem', marginRight: '0.5rem' }}>
                {props.success ? (<CheckIcon color='success' />) : (<BlockIcon color='error' />)}
            </Box>
            <Stack direction='column' width='98%'>
                <Typography sx={{ marginTop: 0, marginBottom: 0, paddingTop: 0 }} component='div'>
                    {props.name.join(' ')}
                </Typography>
                {(props.error?.length ?? 0) > 0 ? (<Typography
                    sx={{ marginTop: '0.25rem', marginBottom: 0, paddingTop: 0, ":first-letter": { textTransform: 'capitalize' } }} color='error'>{props.error}</Typography>) : (<></>)}
                {(props.logs?.length ?? 0) > 0 ? (
                    <Box sx={{ marginTop: '0.25rem', marginBottom: 0 }}>
                        <pre className='log'>{props.logs?.join('\n')}</pre>
                    </Box>
                ) : (<></>)}
            </Stack>
        </Stack>
    )

    let title: string | null = null
    let success: boolean

    const result = workspace.getExecutionResult(props.requestOrGroupId, props.index)
    if (!result) return null

    title = result.info.title

    // if (result?.type === 'group') {
    //     title = `Group Execution ${result.requestsWithFailedTestsCount === 0 && result.requestsWithErrors === 0 ? "Completed" : "Failed"}`
    // } else if (result?.type === 'request') {
    //     title = `Request Execution ${result.success ? "Completed" : "Failed"}`
    // } else {
    //     return null
    // }

    const copyToClipboard = (data: any) => {
        const text = beautify.js_beautify(JSON.stringify(data), {})
        clipboardCtx.writeTextToClipboard(text)
    }

    return (
        <Stack sx={{ position: 'absolute', top: 0, bottom: 0, right: 0, width: '100%', overflow: 'hidden', display: 'flex' }}>
            <Typography variant='h2' sx={{ marginTop: 0, flexGrow: 0 }} component='div'>
                {title}
                <IconButton
                    aria-label="copy results to clipboard"
                    title="Copy Results to Clipboard"
                    sx={{ marginLeft: '1rem' }}
                    color='primary'
                    onClick={_ => copyToClipboard(result)}>
                    <ContentCopyIcon />
                </IconButton>
            </Typography>
            <RenderResult result={result} level={-1} sx={{ overflow: 'auto', bottom: 0, paddingRight: '24px', position: 'relative' }} />
        </Stack >
    )
})
