import deepEqual = require("deep-eql");
declare global {
    namespace Chai {
        type Message = string | (() => string);
        type ObjectProperty = string | symbol | number;
        interface PathInfo {
            parent: object;
            name: string;
            value?: any;
            exists: boolean;
        }
        interface Constructor<T> {
            new(...args: any[]): T;
        }
        interface ErrorConstructor {
            new(...args: any[]): Error;
        }
        interface ChaiUtils {
            addChainableMethod(
                ctx: object,
                name: string,
                method: (...args: any[]) => void,
                chainingBehavior?: () => void,
            ): void;
            overwriteChainableMethod(
                ctx: object,
                name: string,
                method: (...args: any[]) => void,
                chainingBehavior?: () => void,
            ): void;
            addLengthGuard(
                fn: Function,
                assertionName: string,
                isChainable: boolean,
            ): void;
            addMethod(ctx: object, name: string, method: Function): void;
            addProperty(ctx: object, name: string, getter: () => any): void;
            overwriteMethod(ctx: object, name: string, method: Function): void;
            overwriteProperty(ctx: object, name: string, getter: (this: AssertionStatic, _super: any) => any): void;
            compareByInspect(a: object, b: object): -1 | 1;
            expectTypes(obj: object, types: string[]): void;
            flag(obj: object, key: string, value?: any): any;
            getActual(obj: object, args: AssertionArgs): any;
            getProperties(obj: object): string[];
            getEnumerableProperties(obj: object): string[];
            getOwnEnumerablePropertySymbols(obj: object): symbol[];
            getOwnEnumerableProperties(obj: object): Array<string | symbol>;
            getMessage(errorLike: Error | string): string;
            getMessage(obj: any, args: AssertionArgs): string;
            inspect(obj: any, showHidden?: boolean, depth?: number, colors?: boolean): string;
            isProxyEnabled(): boolean;
            objDisplay(obj: object): void;
            proxify(obj: object, nonChainableMethodName: string): object;
            test(obj: object, args: AssertionArgs): boolean;
            transferFlags(assertion: Assertion, obj: object, includeAll?: boolean): void;
            compatibleInstance(thrown: Error, errorLike: Error | ErrorConstructor): boolean;
            compatibleConstructor(thrown: Error, errorLike: Error | ErrorConstructor): boolean;
            compatibleMessage(thrown: Error, errMatcher: string | RegExp): boolean;
            getConstructorName(constructorFn: Function): string;
            getFuncName(constructorFn: Function): string | null;
            hasProperty(obj: object | undefined | null, name: ObjectProperty): boolean;
            getPathInfo(obj: object, path: string): PathInfo;
            getPathValue(obj: object, path: string): object | undefined;
            eql: typeof deepEqual;
        }
        type ChaiPlugin = (chai: ChaiStatic, utils: ChaiUtils) => void;
        interface ChaiStatic {
            expect: ExpectStatic;
            should(): Should;
            use(fn: ChaiPlugin): ChaiStatic;
            util: ChaiUtils;
            assert: AssertStatic;
            config: Config;
            Assertion: AssertionStatic;
            AssertionError: typeof AssertionError;
            version: string;
        }
        export interface ExpectStatic {
            (val: any, message?: string): Assertion;
            fail(message?: string): never;
            fail(actual: any, expected: any, message?: string, operator?: Operator): never;
        }
        export interface AssertStatic extends Assert {
        }
        type AssertionArgs = [
            any, Message, Message, any?, any?, boolean?,];
        export interface AssertionPrototype {
            assert(...args: AssertionArgs): void;
            _obj: any;
        }
        export interface AssertionStatic extends AssertionPrototype {
            prototype: AssertionPrototype;
            new(target: any, message?: string, ssfi?: Function, lockSsfi?: boolean): Assertion;
            includeStack: boolean;
            showDiff: boolean;
            addProperty(name: string, getter: (this: AssertionStatic) => any): void;
            addMethod(name: string, method: (this: AssertionStatic, ...args: any[]) => any): void;
            addChainableMethod(
                name: string,
                method: (this: AssertionStatic, ...args: any[]) => void,
                chainingBehavior?: () => void,
            ): void;
            overwriteProperty(name: string, getter: (this: AssertionStatic, _super: any) => any): void;
            overwriteMethod(name: string, method: (this: AssertionStatic, ...args: any[]) => any): void;
            overwriteChainableMethod(
                name: string,
                method: (this: AssertionStatic, ...args: any[]) => void,
                chainingBehavior?: () => void,
            ): void;
        }
        export type Operator = string;
        export type OperatorComparable = boolean | null | number | string | undefined | Date;
        interface ShouldAssertion {
            equal(value1: any, value2: any, message?: string): void;
            Throw: ShouldThrow;
            throw: ShouldThrow;
            exist(value: any, message?: string): void;
        }
        interface Should extends ShouldAssertion {
            not: ShouldAssertion;
            fail(message?: string): never;
            fail(actual: any, expected: any, message?: string, operator?: Operator): never;
        }
        interface ShouldThrow {
            (actual: Function, expected?: string | RegExp, message?: string): void;
            (actual: Function, constructor: Error | Function, expected?: string | RegExp, message?: string): void;
        }
        interface Assertion extends LanguageChains, NumericComparison, TypeComparison {
            not: Assertion;
            deep: Deep;
            ordered: Ordered;
            nested: Nested;
            own: Own;
            any: KeyFilter;
            all: KeyFilter;
            a: Assertion;
            an: Assertion;
            include: Include;
            includes: Include;
            contain: Include;
            contains: Include;
            ok: Assertion;
            true: Assertion;
            false: Assertion;
            null: Assertion;
            undefined: Assertion;
            NaN: Assertion;
            exist: Assertion;
            empty: Assertion;
            arguments: Assertion;
            Arguments: Assertion;
            finite: Assertion;
            equal: Equal;
            equals: Equal;
            eq: Equal;
            eql: Equal;
            eqls: Equal;
            property: Property;
            ownProperty: Property;
            haveOwnProperty: Property;
            ownPropertyDescriptor: OwnPropertyDescriptor;
            haveOwnPropertyDescriptor: OwnPropertyDescriptor;
            length: Length;
            lengthOf: Length;
            match: Match;
            matches: Match;
            string(string: string, message?: string): Assertion;
            keys: Keys;
            key(string: string): Assertion;
            throw: Throw;
            throws: Throw;
            Throw: Throw;
            respondTo: RespondTo;
            respondsTo: RespondTo;
            itself: Assertion;
            satisfy: Satisfy;
            satisfies: Satisfy;
            closeTo: CloseTo;
            approximately: CloseTo;
            members: Members;
            increase: PropertyChange;
            increases: PropertyChange;
            decrease: PropertyChange;
            decreases: PropertyChange;
            change: PropertyChange;
            changes: PropertyChange;
            extensible: Assertion;
            sealed: Assertion;
            frozen: Assertion;
            oneOf: OneOf;
        }
        interface LanguageChains {
            to: Assertion;
            be: Assertion;
            been: Assertion;
            is: Assertion;
            that: Assertion;
            which: Assertion;
            and: Assertion;
            has: Assertion;
            have: Assertion;
            with: Assertion;
            at: Assertion;
            of: Assertion;
            same: Assertion;
            but: Assertion;
            does: Assertion;
        }
        interface NumericComparison {
            above: NumberComparer;
            gt: NumberComparer;
            greaterThan: NumberComparer;
            least: NumberComparer;
            gte: NumberComparer;
            greaterThanOrEqual: NumberComparer;
            below: NumberComparer;
            lt: NumberComparer;
            lessThan: NumberComparer;
            most: NumberComparer;
            lte: NumberComparer;
            lessThanOrEqual: NumberComparer;
            within(start: number, finish: number, message?: string): Assertion;
            within(start: Date, finish: Date, message?: string): Assertion;
        }
        interface NumberComparer {
            (value: number | Date, message?: string): Assertion;
        }
        interface TypeComparison {
            (type: string, message?: string): Assertion;
            instanceof: InstanceOf;
            instanceOf: InstanceOf;
        }
        interface InstanceOf {
            (constructor: any, message?: string): Assertion;
        }
        interface CloseTo {
            (expected: number, delta: number, message?: string): Assertion;
        }
        interface Nested {
            include: Include;
            includes: Include;
            contain: Include;
            contains: Include;
            property: Property;
            members: Members;
        }
        interface Own {
            include: Include;
            includes: Include;
            contain: Include;
            contains: Include;
            property: Property;
        }
        interface Deep extends KeyFilter {
            be: Assertion;
            equal: Equal;
            equals: Equal;
            eq: Equal;
            include: Include;
            includes: Include;
            contain: Include;
            contains: Include;
            property: Property;
            ordered: Ordered;
            nested: Nested;
            oneOf: OneOf;
            own: Own;
        }
        interface Ordered {
            members: Members;
        }
        interface KeyFilter {
            keys: Keys;
            members: Members;
        }
        interface Equal {
            (value: any, message?: string): Assertion;
        }
        interface Property {
            (name: string | symbol, value: any, message?: string): Assertion;
            (name: string | symbol, message?: string): Assertion;
        }
        interface OwnPropertyDescriptor {
            (name: string | symbol, descriptor: PropertyDescriptor, message?: string): Assertion;
            (name: string | symbol, message?: string): Assertion;
        }
        interface Length extends LanguageChains, NumericComparison {
            (length: number, message?: string): Assertion;
        }
        interface Include {
            (value: any, message?: string): Assertion;
            keys: Keys;
            deep: Deep;
            ordered: Ordered;
            members: Members;
            any: KeyFilter;
            all: KeyFilter;
            oneOf: OneOf;
        }
        interface OneOf {
            (list: readonly unknown[], message?: string): Assertion;
        }
        interface Match {
            (regexp: RegExp, message?: string): Assertion;
        }
        interface Keys {
            (...keys: string[]): Assertion;
            (keys: readonly any[] | Object): Assertion;
        }
        interface Throw {
            (expected?: string | RegExp, message?: string): Assertion;
            (constructor: Error | Function, expected?: string | RegExp, message?: string): Assertion;
        }
        interface RespondTo {
            (method: string, message?: string): Assertion;
        }
        interface Satisfy {
            (matcher: Function, message?: string): Assertion;
        }
        interface Members {
            (set: readonly any[], message?: string): Assertion;
        }
        interface PropertyChange {
            (object: Object, property?: string, message?: string): DeltaAssertion;
        }
        interface DeltaAssertion extends Assertion {
            by(delta: number, msg?: string): Assertion;
        }
        export interface Assert {
            (expression: any, message?: string): asserts expression;
            fail(message?: string): never;
            fail<T>(actual: T, expected: T, message?: string, operator?: Operator): never;
            isOk(value: unknown, message?: string): asserts value;
            ok(value: unknown, message?: string): asserts value;
            isNotOk<T>(value: T, message?: string): void;
            notOk<T>(value: T, message?: string): void;
            equal<T>(actual: T, expected: T, message?: string): void;
            notEqual<T>(actual: T, expected: T, message?: string): void;
            strictEqual<T>(actual: T, expected: T, message?: string): void;
            notStrictEqual<T>(actual: T, expected: T, message?: string): void;
            deepEqual<T>(actual: T, expected: T, message?: string): void;
            notDeepEqual<T>(actual: T, expected: T, message?: string): void;
            deepStrictEqual<T>(actual: T, expected: T, message?: string): void;
            isAbove(valueToCheck: number, valueToBeAbove: number, message?: string): void;
            isAtLeast(valueToCheck: number, valueToBeAtLeast: number, message?: string): void;
            isBelow(valueToCheck: number, valueToBeBelow: number, message?: string): void;
            isAtMost(valueToCheck: number, valueToBeAtMost: number, message?: string): void;
            isTrue(value: unknown, message?: string): asserts value is true;
            isFalse(value: unknown, message?: string): asserts value is false;
            isNotTrue<T>(value: T, message?: string): asserts value is Exclude<T, true>;
            isNotFalse<T>(value: T, message?: string): asserts value is Exclude<T, false>;
            isNull(value: unknown, message?: string): asserts value is null;
            isNotNull<T>(value: T, message?: string): asserts value is Exclude<T, null>;
            isNaN<T>(value: T, message?: string): void;
            isNotNaN<T>(value: T, message?: string): void;
            exists<T>(value: T, message?: string): asserts value is NonNullable<T>;
            notExists(value: unknown, message?: string): asserts value is
                | null
                | undefined;
            isUndefined(value: unknown, message?: string): asserts value is undefined;
            isDefined<T>(value: T, message?: string): asserts value is Exclude<T, undefined>;
            isFunction<T>(value: T, message?: string): void;
            isNotFunction<T>(value: T, message?: string): void;
            isObject<T>(value: T, message?: string): void;
            isNotObject<T>(value: T, message?: string): void;
            isArray<T>(value: T, message?: string): void;
            isNotArray<T>(value: T, message?: string): void;
            isString<T>(value: T, message?: string): void;
            isNotString<T>(value: T, message?: string): void;
            isNumber<T>(value: T, message?: string): void;
            isNotNumber<T>(value: T, message?: string): void;
            isFinite<T>(value: T, message?: string): void;
            isBoolean<T>(value: T, message?: string): void;
            isNotBoolean<T>(value: T, message?: string): void;
            typeOf<T>(value: T, name: string, message?: string): void;
            notTypeOf<T>(value: T, name: string, message?: string): void;
            instanceOf<T>(
                value: unknown,
                constructor: Constructor<T>,
                message?: string,
            ): asserts value is T;
            notInstanceOf<T, U>(value: T, type: Constructor<U>, message?: string): asserts value is Exclude<T, U>;
            include(haystack: string, needle: string, message?: string): void;
            include<T>(
                haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>,
                needle: T,
                message?: string,
            ): void;
            include<T extends object>(haystack: WeakSet<T>, needle: T, message?: string): void;
            include<T>(haystack: T, needle: Partial<T>, message?: string): void;
            notInclude(haystack: string, needle: string, message?: string): void;
            notInclude<T>(
                haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>,
                needle: T,
                message?: string,
            ): void;
            notInclude<T extends object>(haystack: WeakSet<T>, needle: T, message?: string): void;
            notInclude<T>(haystack: T, needle: Partial<T>, message?: string): void;
            deepInclude(haystack: string, needle: string, message?: string): void;
            deepInclude<T>(
                haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>,
                needle: T,
                message?: string,
            ): void;
            deepInclude<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string): void;
            notDeepInclude(haystack: string, needle: string, message?: string): void;
            notDeepInclude<T>(
                haystack: readonly T[] | ReadonlySet<T> | ReadonlyMap<any, T>,
                needle: T,
                message?: string,
            ): void;
            notDeepInclude<T>(haystack: T, needle: T extends WeakSet<any> ? never : Partial<T>, message?: string): void;
            nestedInclude(haystack: any, needle: any, message?: string): void;
            notNestedInclude(haystack: any, needle: any, message?: string): void;
            deepNestedInclude(haystack: any, needle: any, message?: string): void;
            notDeepNestedInclude(haystack: any, needle: any, message?: string): void;
            ownInclude(haystack: any, needle: any, message?: string): void;
            notOwnInclude(haystack: any, needle: any, message?: string): void;
            deepOwnInclude(haystack: any, needle: any, message?: string): void;
            notDeepOwnInclude(haystack: any, needle: any, message?: string): void;
            match(value: string, regexp: RegExp, message?: string): void;
            notMatch(expected: any, regexp: RegExp, message?: string): void;
            property<T>(object: T, property: string, message?: string): void;
            notProperty<T>(object: T, property: string, message?: string): void;
            deepProperty<T>(object: T, property: string, message?: string): void;
            notDeepProperty<T>(object: T, property: string, message?: string): void;
            propertyVal<T, V>(object: T, property: string, value: V, message?: string): void;
            notPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;
            deepPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;
            notDeepPropertyVal<T, V>(object: T, property: string, value: V, message?: string): void;
            lengthOf<T extends { readonly length?: number | undefined } | { readonly size?: number | undefined }>(
                object: T,
                length: number,
                message?: string,
            ): void;
            throw(fn: () => void, errMsgMatcher?: RegExp | string, ignored?: any, message?: string): void;
            throw(
                fn: () => void,
                errorLike?: ErrorConstructor | Error | null,
                errMsgMatcher?: RegExp | string | null,
                message?: string,
            ): void;
            throws(fn: () => void, errMsgMatcher?: RegExp | string, ignored?: any, message?: string): void;
            throws(
                fn: () => void,
                errorLike?: ErrorConstructor | Error | null,
                errMsgMatcher?: RegExp | string | null,
                message?: string,
            ): void;
            Throw(fn: () => void, errMsgMatcher?: RegExp | string, ignored?: any, message?: string): void;
            Throw(
                fn: () => void,
                errorLike?: ErrorConstructor | Error | null,
                errMsgMatcher?: RegExp | string | null,
                message?: string,
            ): void;
            doesNotThrow(fn: () => void, errMsgMatcher?: RegExp | string, ignored?: any, message?: string): void;
            doesNotThrow(
                fn: () => void,
                errorLike?: ErrorConstructor | Error | null,
                errMsgMatcher?: RegExp | string | null,
                message?: string,
            ): void;
            operator(val1: OperatorComparable, operator: Operator, val2: OperatorComparable, message?: string): void;
            closeTo(actual: number, expected: number, delta: number, message?: string): void;
            approximately(act: number, exp: number, delta: number, message?: string): void;
            sameMembers<T>(set1: T[], set2: T[], message?: string): void;
            sameDeepMembers<T>(set1: T[], set2: T[], message?: string): void;
            notSameDeepMembers<T>(set1: T[], set2: T[], message?: string): void;
            sameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;
            notSameOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;
            sameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;
            notSameDeepOrderedMembers<T>(set1: T[], set2: T[], message?: string): void;
            includeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;
            notIncludeOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;
            includeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;
            notIncludeDeepOrderedMembers<T>(superset: T[], subset: T[], message?: string): void;
            includeMembers<T>(superset: T[], subset: T[], message?: string): void;
            notIncludeMembers<T>(superset: T[], subset: T[], message?: string): void;
            includeDeepMembers<T>(superset: T[], subset: T[], message?: string): void;
            notIncludeDeepMembers<T>(superset: T[], subset: T[], message?: string): void;
            oneOf<T>(inList: T, list: T[], message?: string): void;
            changes<T>(modifier: Function, object: T, property: string, message?: string): void;
            changesBy<T>(
                modifier: Function,
                object: T,
                property: string,
                change: number,
                message?: string,
            ): void;
            changesBy<T>(modifier: Function, object: T, change: number, message?: string): void;
            doesNotChange<T>(modifier: Function, object: T, property: string, message?: string): void;
            increases<T>(modifier: Function, object: T, property: string, message?: string): void;
            increasesBy<T>(
                modifier: Function,
                object: T,
                property: string,
                change: number,
                message?: string,
            ): void;
            increasesBy<T>(modifier: Function, object: T, change: number, message?: string): void;
            doesNotIncrease<T>(modifier: Function, object: T, property: string, message?: string): void;
            increasesButNotBy<T>(
                modifier: Function,
                object: T,
                property: string,
                change: number,
                message?: string,
            ): void;
            increasesButNotBy<T>(modifier: Function, object: T, change: number, message?: string): void;
            decreases<T>(modifier: Function, object: T, property: string, message?: string): void;
            decreasesBy<T>(
                modifier: Function,
                object: T,
                property: string,
                change: number,
                message?: string,
            ): void;
            decreasesBy<T>(modifier: Function, object: T, change: number, message?: string): void;
            doesNotDecrease<T>(modifier: Function, object: T, property: string, message?: string): void;
            doesNotDecreaseBy<T>(
                modifier: Function,
                object: T,
                property: string,
                change: number,
                message?: string,
            ): void;
            doesNotDecreaseBy<T>(modifier: Function, object: T, change: number, message?: string): void;
            decreasesButNotBy<T>(
                modifier: Function,
                object: T,
                property: string,
                change: number,
                message?: string,
            ): void;
            decreasesButNotBy<T>(modifier: Function, object: T, change: number, message?: string): void;
            ifError<T>(object: T, message?: string): void;
            isExtensible<T>(object: T, message?: string): void;
            extensible<T>(object: T, message?: string): void;
            isNotExtensible<T>(object: T, message?: string): void;
            notExtensible<T>(object: T, message?: string): void;
            isSealed<T>(object: T, message?: string): void;
            sealed<T>(object: T, message?: string): void;
            isNotSealed<T>(object: T, message?: string): void;
            notSealed<T>(object: T, message?: string): void;
            isFrozen<T>(object: T, message?: string): void;
            frozen<T>(object: T, message?: string): void;
            isNotFrozen<T>(object: T, message?: string): void;
            notFrozen<T>(object: T, message?: string): void;
            isEmpty<T>(object: T, message?: string): void;
            isNotEmpty<T>(object: T, message?: string): void;
            hasAnyKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;
            hasAllKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;
            containsAllKeys<T>(
                object: T,
                keys: Array<Object | string> | { [key: string]: any },
                message?: string,
            ): void;
            doesNotHaveAnyKeys<T>(
                object: T,
                keys: Array<Object | string> | { [key: string]: any },
                message?: string,
            ): void;
            doesNotHaveAllKeys<T>(
                object: T,
                keys: Array<Object | string> | { [key: string]: any },
                message?: string,
            ): void;
            hasAnyDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;
            hasAllDeepKeys<T>(object: T, keys: Array<Object | string> | { [key: string]: any }, message?: string): void;
            containsAllDeepKeys<T>(
                object: T,
                keys: Array<Object | string> | { [key: string]: any },
                message?: string,
            ): void;
            doesNotHaveAnyDeepKeys<T>(
                object: T,
                keys: Array<Object | string> | { [key: string]: any },
                message?: string,
            ): void;
            doesNotHaveAllDeepKeys<T>(
                object: T,
                keys: Array<Object | string> | { [key: string]: any },
                message?: string,
            ): void;
            nestedProperty<T>(object: T, property: string, message?: string): void;
            notNestedProperty<T>(object: T, property: string, message?: string): void;
            nestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;
            notNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;
            deepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;
            notDeepNestedPropertyVal<T>(object: T, property: string, value: any, message?: string): void;
        }
        export interface Config {
            includeStack: boolean;
            showDiff: boolean;
            truncateThreshold: number;
            useProxy: boolean;
            proxyExcludedKeys: string[];
            deepEqual: <L, R>(expected: L, actual: R) => void;
        }
        export class AssertionError {
            constructor(message: string, _props?: any, ssf?: Function);
            name: string;
            message: string;
            showDiff: boolean;
            stack: string;
        }
    }
}
export function use(fn: Chai.ChaiPlugin): Chai.ChaiStatic;
export const util: Chai.ChaiUtils;
export const config: Chai.Config;
export const Assertion: Chai.AssertionStatic;
export function should(): Chai.Should;
export function Should(): Chai.Should;
export const assert: Chai.AssertStatic;
export const expect: Chai.ExpectStatic;
declare global {
    interface Object {
        should: Chai.Assertion;
    }
}
